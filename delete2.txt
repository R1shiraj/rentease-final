I'll help you implement a simple payment integration for your home appliance rental website. Based on your requirements, Stripe is one of the simplest payment processors to integrate, especially for development/testing purposes. Let me walk you through implementing Stripe payment gateway in your application.

First, let's install the required packages:

```bash
npm install @stripe/stripe-js stripe
```

Let's create the necessary components and API routes for Stripe integration:

1. First, let's create a Stripe API route:

```typescript
// src/app/api/payment/route.ts
import { NextResponse } from 'next/server';
import Stripe from 'stripe';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';

// Initialize Stripe with your secret key
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY || '', {
  apiVersion: '2023-08-16',
});

export async function POST(req: Request) {
  try {
    const session = await getServerSession(authOptions);
    
    if (!session) {
      return NextResponse.json(
        { error: 'You must be logged in to create a payment' },
        { status: 401 }
      );
    }
    
    const body = await req.json();
    const { amount, metadata } = body;
    
    // Create a PaymentIntent with the order amount and currency
    const paymentIntent = await stripe.paymentIntents.create({
      amount: Math.round(amount * 100), // Stripe expects amounts in cents
      currency: 'inr',
      metadata: metadata || {},
      automatic_payment_methods: {
        enabled: true,
      },
    });

    return NextResponse.json({ 
      clientSecret: paymentIntent.client_secret 
    });
  } catch (error: any) {
    return NextResponse.json(
      { error: error.message },
      { status: 500 }
    );
  }
}
```

2. Next, let's create a component for our payment form:

```tsx
// src/components/payment/StripePaymentForm.tsx
"use client";

import React, { useEffect, useState } from 'react';
import {
  PaymentElement,
  LinkAuthenticationElement,
  useStripe,
  useElements,
  Elements,
} from '@stripe/react-stripe-js';
import { loadStripe } from '@stripe/stripe-js';
import { Button } from '@/components/ui/button';
import { Loader2 } from 'lucide-react';

// Initialize Stripe with your publishable key
const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY || '');

interface PaymentFormProps {
  clientSecret: string;
  onSuccess: () => void;
  onCancel: () => void;
  amount: number;
}

// Wrapped component that contains the Elements provider
export function StripePaymentWrapper({ 
  amount, 
  onSuccess, 
  onCancel,
  metadata = {}
}: { 
  amount: number;
  onSuccess: () => void;
  onCancel: () => void;
  metadata?: Record<string, any>;
}) {
  const [clientSecret, setClientSecret] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // Create PaymentIntent as soon as the component loads
    const createPaymentIntent = async () => {
      try {
        setIsLoading(true);
        const response = await fetch('/api/payment', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ amount, metadata }),
        });
        
        const data = await response.json();
        
        if (!response.ok) {
          throw new Error(data.error || 'Failed to create payment intent');
        }
        
        setClientSecret(data.clientSecret);
      } catch (error: any) {
        setError(error.message);
        console.error('Payment setup error:', error);
      } finally {
        setIsLoading(false);
      }
    };

    createPaymentIntent();
  }, [amount, metadata]);

  if (isLoading) {
    return (
      <div className="flex justify-center items-center py-8">
        <Loader2 className="h-8 w-8 animate-spin text-primary" />
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-red-50 border border-red-200 text-red-700 p-4 rounded-md">
        <p className="font-medium">Payment Setup Error</p>
        <p className="text-sm mt-1">{error}</p>
        <Button 
          variant="outline" 
          className="mt-3"
          onClick={onCancel}
        >
          Go back
        </Button>
      </div>
    );
  }

  const options = {
    clientSecret,
    appearance: {
      theme: 'stripe',
      variables: {
        colorPrimary: '#7c3aed',
      },
    },
  };

  return (
    <div className="w-full max-w-md mx-auto">
      {clientSecret && (
        <Elements stripe={stripePromise} options={options}>
          <StripePaymentForm 
            clientSecret={clientSecret} 
            onSuccess={onSuccess} 
            onCancel={onCancel} 
            amount={amount}
          />
        </Elements>
      )}
    </div>
  );
}

// The actual form component that will be rendered inside Elements
function StripePaymentForm({ clientSecret, onSuccess, onCancel, amount }: PaymentFormProps) {
  const stripe = useStripe();
  const elements = useElements();
  const [email, setEmail] = useState('');
  const [message, setMessage] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    if (!stripe) {
      return;
    }

    // Check the payment intent status right away
    if (clientSecret) {
      stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {
        switch (paymentIntent?.status) {
          case "succeeded":
            setMessage("Payment succeeded!");
            onSuccess();
            break;
          case "processing":
            setMessage("Your payment is processing.");
            break;
          case "requires_payment_method":
            setMessage("Please provide your payment details.");
            break;
          default:
            setMessage("Something went wrong.");
            break;
        }
      });
    }
  }, [stripe, clientSecret, onSuccess]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!stripe || !elements) {
      // Stripe.js hasn't yet loaded.
      return;
    }

    setIsLoading(true);

    const { error } = await stripe.confirmPayment({
      elements,
      confirmParams: {
        return_url: `${window.location.origin}/user/rentals/success`,
        receipt_email: email,
      },
      redirect: 'if_required',
    });

    // If no redirect happened, we need to handle the result
    if (error) {
      console.error('Payment confirmation error:', error);
      setMessage(error.message || "An error occurred during payment. Please try again.");
    } else {
      // The payment succeeded!
      setMessage("Payment succeeded!");
      onSuccess();
    }

    setIsLoading(false);
  };

  return (
    <form id="payment-form" onSubmit={handleSubmit} className="space-y-6">
      <div className="bg-primary/5 p-4 rounded-lg mb-4 flex justify-between">
        <span>Total Amount:</span>
        <span className="font-bold">₹{amount.toFixed(2)}</span>
      </div>
      
      <LinkAuthenticationElement 
        id="link-authentication-element"
        onChange={(e) => setEmail(e.value.email)}
      />
      
      <PaymentElement id="payment-element" />
      
      {message && (
        <div className={`p-3 rounded-md ${message.includes('succeeded') ? 'bg-green-50 text-green-700' : 'bg-amber-50 text-amber-700'}`}>
          {message}
        </div>
      )}
      
      <div className="flex gap-3">
        <Button
          variant="outline"
          disabled={isLoading}
          className="flex-1"
          type="button"
          onClick={onCancel}
        >
          Cancel
        </Button>
        <Button 
          className="flex-1" 
          disabled={isLoading || !stripe || !elements} 
          type="submit"
        >
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Processing...
            </>
          ) : (
            `Pay ₹${amount.toFixed(2)}`
          )}
        </Button>
      </div>
    </form>
  );
}

```

3. Now, let's update your checkout page to include the Stripe payment option:

```tsx
"use client";

import React, { useState, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import {
  CheckCircle,
  Truck,
  Shield,
  CreditCard,
  CalendarIcon,
  ArrowLeft,
  Loader2,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { format, addDays } from "date-fns";
import Image from "next/image";
import { toast } from "@/components/ui/use-toast";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogTitle } from "@/components/ui/dialog";
import { StripePaymentWrapper } from "@/components/payment/StripePaymentForm";

interface ApplianceData {
  _id: string;
  name: string;
  images: string[];
  pricing: {
    daily: number;
    weekly: number;
    monthly: number;
    deposit: number;
  };
}

const CheckoutPage = () => {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [paymentMethod, setPaymentMethod] = useState
    "ONLINE" | "CASH_ON_DELIVERY"
  >("ONLINE");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [appliances, setAppliances] = useState<ApplianceData[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [showPaymentModal, setShowPaymentModal] = useState(false);

  // For direct appliance rental
  const applianceId = searchParams.get("applianceId");
  const initialStartDate = searchParams.get("startDate");
  const initialEndDate = searchParams.get("endDate");
  const totalAmount = searchParams.get("totalAmount");
  const depositParam = searchParams.get("deposit");

  // For tracking dates for each appliance (cart checkout)
  const [applianceDates, setApplianceDates] = useState<{
    [key: string]: {
      startDate: Date | null;
      endDate: Date | null;
      totalAmount: number;
    };
  }>(
    applianceId && initialStartDate && initialEndDate
      ? {
          [applianceId]: {
            startDate: new Date(initialStartDate),
            endDate: new Date(initialEndDate),
            totalAmount: Number(totalAmount || 0),
          },
        }
      : {}
  );

  // For address
  const [deliveryAddress, setDeliveryAddress] = useState({
    street: "",
    city: "",
    state: "",
    zipCode: "",
  });
  const [deliveryTime, setDeliveryTime] = useState("10:00-14:00");

  // Validate form state
  const isFormValid = () => {
    const allDatesSelected = Object.entries(applianceDates).every(
      ([_, dates]) => dates.startDate && dates.endDate
    );
    
    const addressFilled = 
      deliveryAddress.street && 
      deliveryAddress.city && 
      deliveryAddress.state && 
      deliveryAddress.zipCode;
      
    return allDatesSelected && addressFilled;
  };

  // Calculate days between dates
  const calculateDaysBetween = (start: Date, end: Date) => {
    return Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
  };

  // Calculate rental amount based on days
  const calculateRentalAmount = (days: number, pricing: any) => {
    if (days >= 30) {
      const months = Math.floor(days / 30);
      const remainingDays = days % 30;
      return months * pricing.monthly + remainingDays * pricing.daily;
    } else if (days >= 7) {
      const weeks = Math.floor(days / 7);
      const remainingDays = days % 7;
      return weeks * pricing.weekly + remainingDays * pricing.daily;
    } else {
      return days * pricing.daily;
    }
  };

  // Update dates and calculate prices
  const updateDates = (
    appId: string,
    startDate: Date | null,
    endDate: Date | null,
    pricing: any
  ) => {
    if (startDate && endDate) {
      const days = calculateDaysBetween(startDate, endDate);
      const amount = calculateRentalAmount(days, pricing);

      setApplianceDates((prev) => ({
        ...prev,
        [appId]: {
          ...prev[appId],
          startDate,
          endDate,
          totalAmount: amount,
        },
      }));
    }
  };

  // Fetch appliance data
  useEffect(() => {
    const fetchData = async () => {
      setIsLoading(true);
      try {
        if (applianceId) {
          // Direct rental - fetch single appliance
          const res = await fetch(`/api/appliances/${applianceId}`);
          if (res.ok) {
            const data = await res.json();
            setAppliances([data.appliance]);
          }
        } else {
          // Cart checkout - fetch cart items
          const res = await fetch("/api/user/cart");
          if (res.ok) {
            const data = await res.json();

            // Initialize empty date entries for each cart item
            const initialDates: {
              [key: string]: {
                startDate: Date | null;
                endDate: Date | null;
                totalAmount: number;
              };
            } = {};

            data.cartItems.forEach((item: any) => {
              initialDates[item.appliance._id] = {
                startDate: null,
                endDate: null,
                totalAmount: 0,
              };
            });

            setApplianceDates(initialDates);
            setAppliances(data.cartItems.map((item: any) => item.appliance));
          }
        }
      } catch (error) {
        console.error("Error fetching data:", error);
        toast({
          title: "Error",
          description: "Failed to load checkout information",
          variant: "destructive",
        });
      } finally {
        setIsLoading(false);
      }
    };

    fetchData();
  }, [applianceId]);

  // Handle initial payment flow
  const handlePayment = () => {
    // Check if all required information is filled
    if (!isFormValid()) {
      toast({
        title: "Missing information",
        description: "Please fill in all required fields",
        variant: "destructive",
      });
      return;
    }

    if (paymentMethod === "CASH_ON_DELIVERY") {
      handleConfirmOrder();
    } else {
      // Show Stripe payment dialog
      setShowPaymentModal(true);
    }
  };

  // Handle payment success
  const handlePaymentSuccess = async () => {
    try {
      await handleConfirmOrder(true);
      setShowPaymentModal(false);
    } catch (error) {
      console.error("Error processing order after payment:", error);
    }
  };

  // Handle form submission
  const handleConfirmOrder = async (paymentCompleted = false) => {
    try {
      setIsSubmitting(true);

      // Check if all appliances have dates selected (for cart checkout)
      const allDatesSelected = Object.entries(applianceDates).every(
        ([_, dates]) => dates.startDate && dates.endDate
      );

      if (!allDatesSelected) {
        toast({
          title: "Missing information",
          description: "Please select rental dates for all items",
          variant: "destructive",
        });
        setIsSubmitting(false);
        return;
      }

      // Create rentals for each appliance
      const rentalPromises = Object.entries(applianceDates).map(
        async ([appId, dates]) => {
          const appliance = appliances.find((a) => a._id === appId);

          if (!appliance || !dates.startDate || !dates.endDate) return null;

          const rentalData = {
            applianceId: appId,
            providerId: "", // This will be set on the server based on the appliance
            startDate: dates.startDate.toISOString(),
            endDate: dates.endDate.toISOString(),
            totalAmount: dates.totalAmount,
            deposit: appliance.pricing.deposit,
            paymentMethod: paymentMethod,
            paymentStatus: paymentMethod === "ONLINE" && paymentCompleted ? "PAID" : "PENDING",
            deliveryAddress,
            deliveryTime,
          };
          
          const res = await fetch("/api/user/rentals", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(rentalData),
          });

          if (!res.ok) {
            throw new Error("Failed to create rental");
          }

          return res.json();
        }
      );

      await Promise.all(rentalPromises);

      // Clear cart if coming from cart page
      if (!applianceId) {
        await fetch("/api/user/cart/clear", {
          method: "DELETE",
        });
      }

      // Redirect to success page
      router.push("/user/rentals/success");
    } catch (error) {
      console.error("Error confirming order:", error);
      toast({
        title: "Error",
        description: "Failed to confirm order. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-96">
        <Loader2 className="h-12 w-12 animate-spin text-primary" />
      </div>
    );
  }

  const calculateTotalDeposit = () => {
    return appliances.reduce((sum, app) => sum + app.pricing.deposit, 0);
  };

  const calculateTotalRental = () => {
    return Object.values(applianceDates).reduce(
      (sum, dates) => sum + dates.totalAmount,
      0
    );
  };

  const totalOrderAmount = calculateTotalRental() + calculateTotalDeposit();

  return (
    <div className="max-w-4xl mx-auto py-8 px-4">
      <div className="flex items-center mb-6 space-x-4">
        <Button
          variant="ghost"
          size="icon"
          onClick={() => router.back()}
          className="hover:bg-primary/10"
        >
          <ArrowLeft className="h-5 w-5" />
        </Button>
        <h1 className="text-2xl font-bold">Checkout</h1>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
        {/* Order Summary */}
        <div className="md:col-span-2 space-y-6">
          {/* Appliances */}
          {appliances.map((appliance) => (
            <Card
              key={appliance._id}
              className="overflow-hidden border-0 shadow-md"
            >
              <CardContent className="p-0">
                <div className="flex flex-col sm:flex-row">
                  {/* Appliance Image */}
                  <div className="relative aspect-video sm:aspect-square sm:w-1/3 overflow-hidden">
                    <Image
                      src={appliance.images[0] || "/placeholder-appliance.jpg"}
                      alt={appliance.name}
                      fill
                      className="object-cover"
                    />
                  </div>

                  {/* Appliance Details */}
                  <div className="flex-1 p-5">
                    <div className="flex justify-between items-start">
                      <div>
                        <h3 className="text-lg font-medium">
                          {appliance.name}
                        </h3>

                        {/* Pricing breakdown */}
                        <div className="mt-2 flex flex-wrap gap-2 text-sm">
                          <Badge variant="outline">
                            ₹{appliance.pricing.daily}/day
                          </Badge>
                          <Badge variant="outline">
                            ₹{appliance.pricing.weekly}/week
                          </Badge>
                          <Badge variant="outline">
                            ₹{appliance.pricing.monthly}/month
                          </Badge>
                        </div>
                      </div>
                    </div>

                    {/* Date Selector */}
                    <div className="mt-4 space-y-4">
                      <div className="flex flex-col sm:flex-row sm:items-center gap-3">
                        <div className="w-full sm:w-auto">
                          <Popover>
                            <PopoverTrigger asChild>
                              <Button
                                variant="outline"
                                className="w-full justify-start"
                              >
                                <CalendarIcon className="mr-2 h-4 w-4" />
                                {applianceDates[appliance._id]?.startDate
                                  ? format(
                                      applianceDates[appliance._id]
                                        .startDate as Date,
                                      "PPP"
                                    )
                                  : "Select start date"}
                              </Button>
                            </PopoverTrigger>
                            <PopoverContent className="w-auto p-0">
                              <Calendar
                                mode="single"
                                selected={
                                  applianceDates[appliance._id]?.startDate ||
                                  undefined
                                }
                                onSelect={(date) => {
                                  if (date) {
                                    const endDate =
                                      applianceDates[appliance._id]?.endDate ||
                                      addDays(date, 7);
                                    updateDates(
                                      appliance._id,
                                      date,
                                      endDate,
                                      appliance.pricing
                                    );
                                  }
                                }}
                                initialFocus
                                disabled={(date) => date < new Date()}
                              />
                            </PopoverContent>
                          </Popover>
                        </div>

                        <div className="text-center">to</div>

                        <div className="w-full sm:w-auto">
                          <Popover>
                            <PopoverTrigger asChild>
                              <Button
                                variant="outline"
                                className="w-full justify-start"
                              >
                                <CalendarIcon className="mr-2 h-4 w-4" />
                                {applianceDates[appliance._id]?.endDate
                                  ? format(
                                      applianceDates[appliance._id]
                                        .endDate as Date,
                                      "PPP"
                                    )
                                  : "Select end date"}
                              </Button>
                            </PopoverTrigger>
                            <PopoverContent className="w-auto p-0">
                              <Calendar
                                mode="single"
                                selected={
                                  applianceDates[appliance._id]?.endDate ||
                                  undefined
                                }
                                onSelect={(date) => {
                                  if (date) {
                                    const startDate =
                                      applianceDates[appliance._id]
                                        ?.startDate || new Date();
                                    updateDates(
                                      appliance._id,
                                      startDate,
                                      date,
                                      appliance.pricing
                                    );
                                  }
                                }}
                                initialFocus
                                disabled={(date) =>
                                  date 
                                  (applianceDates[appliance._id]?.startDate ||
                                    new Date())
                                }
                              />
                            </PopoverContent>
                          </Popover>
                        </div>
                      </div>

                      {/* Show calculated amount */}
                      {applianceDates[appliance._id]?.startDate &&
                        applianceDates[appliance._id]?.endDate && (
                          <div className="bg-primary/10 p-3 rounded-lg">
                            <div className="flex justify-between items-center">
                              <span>Rental period:</span>
                              <span>
                                {calculateDaysBetween(
                                  applianceDates[appliance._id]
                                    .startDate as Date,
                                  applianceDates[appliance._id].endDate as Date
                                )}{" "}
                                days
                              </span>
                            </div>
                            <div className="flex justify-between items-center mt-1">
                              <span>Rental total:</span>
                              <span className="font-medium">
                                ₹{applianceDates[appliance._id].totalAmount}
                              </span>
                            </div>
                          </div>
                        )}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}

          {/* Delivery Address */}
          <Card className="border-0 shadow-md">
            <CardContent className="p-6">
              <h2 className="font-medium mb-4">Delivery Information</h2>

              <div className="space-y-4">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <input
                    type="text"
                    placeholder="Street Address"
                    className="rounded-md border border-input p-2 w-full"
                    value={deliveryAddress.street}
                    onChange={(e) =>
                      setDeliveryAddress({
                        ...deliveryAddress,
                        street: e.target.value,
                      })
                    }
                    required
                  />
                  <input
                    type="text"
                    placeholder="City"
                    className="rounded-md border border-input p-2 w-full"
                    value={deliveryAddress.city}
                    onChange={(e) =>
                      setDeliveryAddress({
                        ...deliveryAddress,
                        city: e.target.value,
                      })
                    }
                    required
                  />
                  <input
                    type="text"
                    placeholder="State"
                    className="rounded-md border border-input p-2 w-full"
                    value={deliveryAddress.state}
                    onChange={(e) =>
                      setDeliveryAddress({
                        ...deliveryAddress,
                        state: e.target.value,
                      })
                    }
                    required
                  />
                  <input
                    type="text"
                    placeholder="Zip Code"
                    className="rounded-md border border-input p-2 w-full"
                    value={deliveryAddress.zipCode}
                    onChange={(e) =>
                      setDeliveryAddress({
                        ...deliveryAddress,
                        zipCode: e.target.value,
                      })
                    }
                    required
                  />
                </div>

                <div>
                  <label className="block text-sm mb-2">
                    Preferred Delivery Time
                  </label>
                  <select
                    className="rounded-md border border-input p-2 w-full"
                    value={deliveryTime}
                    onChange={(e) => setDeliveryTime(e.target.value)}
                  >
                    <option value="10:00-14:00">Morning (10:00 - 14:00)</option>
                    <option value="14:00-18:00">
                      Afternoon (14:00 - 18:00)
                    </option>
                    <option value="18:00-22:00">Evening (18:00 - 22:00)</option>
                  </select>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Payment Method */}
          <Card className="border-0 shadow-md">
            <CardContent className="p-6">
              <h2 className="font-medium mb-4">Payment Method</h2>

              <div className="space-y-3">
                <Button
                  variant={paymentMethod === "ONLINE" ? "default" : "outline"}
                  className="w-full justify-start gap-3"
                  onClick={() => setPaymentMethod("ONLINE")}
                >
                  <CreditCard className="h-5 w-5" />
                  Online Payment
                </Button>
                <Button
                  variant={
                    paymentMethod === "CASH_ON_DELIVERY" ? "default" : "outline"
                  }
                  className="w-full justify-start gap-3"
                  onClick={() => setPaymentMethod("CASH_ON_DELIVERY")}
                >
                  <Truck className="h-5 w-5" />
                  Cash on Delivery
                </Button>

                {paymentMethod === "ONLINE" && (
                  <Alert className="bg-primary/5 border-primary/20 mt-3">
                    <AlertDescription>
                      You can use Stripe test card: 4242 4242 4242 4242 with any future date and CVC.
                    </AlertDescription>
                  </Alert>
                )}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Order Total */}
        <div>
          <div className="sticky top-8 space-y-6">
            <Card className="border-0 shadow-md">
              <CardContent className="p-6">
                <h2 className="font-medium mb-4">Order Total</h2>

                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span>Rental Total</span>
                    <span>₹{calculateTotalRental()}</span>
                  </div>
                                    <div className="flex justify-between">
                    <span>Security Deposit</span>
                    <span>₹{calculateTotalDeposit()}</span>
                  </div>

                  {/* Missing dates warning */}
                  {Object.values(applianceDates).some(
                    (dates) => !dates.startDate || !dates.endDate
                  ) && (
                    <div className="bg-amber-50 text-amber-800 border border-amber-200 p-3 rounded-md text-sm mt-2">
                      Please select rental dates for all items
                    </div>
                  )}

                  <Separator className="my-2" />
                  <div className="flex justify-between font-medium">
                    <span>Total Amount</span>
                    <span className="text-xl">
                      ₹
                      {(
                        calculateTotalRental() + calculateTotalDeposit()
                      ).toFixed(2)}
                    </span>
                  </div>
                </div>
              </CardContent>
              <CardFooter className="p-6 pt-0">
                <Button
                  className="w-full h-12 text-lg font-medium"
                  onClick={handlePayment}
                  disabled={
                    isSubmitting ||
                    Object.values(applianceDates).some(
                      (dates) => !dates.startDate || !dates.endDate
                    )
                  }
                >
                  {isSubmitting ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Processing...
                    </>
                  ) : (
                    "Confirm Order"
                  )}
                </Button>
              </CardFooter>
            </Card>

            {/* Benefits */}
            <div className="bg-muted/30 p-4 rounded-lg space-y-3">
              <div className="flex gap-2">
                <CheckCircle className="h-5 w-5 text-primary/70" />
                <span className="text-sm">Secure payment</span>
              </div>
              <div className="flex gap-2">
                <Truck className="h-5 w-5 text-primary/70" />
                <span className="text-sm">Free delivery and pickup</span>
              </div>
              <div className="flex gap-2">
                <Shield className="h-5 w-5 text-primary/70" />
                <span className="text-sm">Damage protection included</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Payment Modal */}
      <Dialog open={showPaymentModal} onOpenChange={setShowPaymentModal}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogTitle>Complete Payment</DialogTitle>
          <StripePaymentWrapper
            amount={totalOrderAmount}
            onSuccess={handlePaymentSuccess}
            onCancel={() => setShowPaymentModal(false)}
            metadata={{
              userId: "currentUserId", // Replace with actual user ID
              applianceIds: appliances.map((app) => app._id),
              deliveryAddress,
              deliveryTime,
            }}
          />
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default CheckoutPage;
```



This is the error i am getting: 
"Payment Setup Error

Metadata values must be strings, but for key `deliveryAddress` you passed in a value of type `hash`. Invalid value: {:zipCode=>"400088", :state=>"Mahrashtra", :street=>"Main Road, Cheeta camp", :city=>"Mumbai"}

Go back"
                